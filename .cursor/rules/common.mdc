---
description: 
globs: 
alwaysApply: true
---
# 通用代码规范
max-line-length: 100
indent-size: 2
end-of-line: lf
charset: utf-8
trim-trailing-whitespace: true
insert-final-newline: true

# 文件命名规则
*.md: kebab-case
*.json: kebab-case
*.yml: kebab-case
*.yaml: kebab-case

# 文档规范
*.md: {
  max-line-length: 120
  require-headers: true
}

# 配置文件规范
*.json: {
  require-schema: true
  max-line-length: 120
}

# 脚本文件规范
*.sh: {
  require-shebang: true
  require-executable: true
}

# 包管理器规范
package-manager: pnpm
dependencies-install-command: pnpm install
dev-dependencies-install-command: pnpm add -D
dependencies-add-command: pnpm add
script-run-command: pnpm run
# 禁止使用npm相关命令
forbidden-commands: ["npm install", "npm i", "npm run", "npm add", "yarn", "yarn add", "yarn install"]

# 环境变量规范
environment-variables: {
  dev-file: ".env.development"
  staging-file: ".env.staging"
  prod-file: ".env.production"
  docker-file: ".env.docker"
  template-file: ".env.example"
  # 确保使用相对路径引用环境变量文件
  require-relative-paths: true
}

# Docker规范
docker: {
  # 优先使用docker-compose而非单独的docker命令
  prefer-compose: true
  # docker-compose文件版本
  compose-version: "3"
  # 禁止使用root用户运行容器
  forbid-root-user: true
}

# CI/CD规范
ci-cd: {
  # 推荐使用的CI/CD平台
  platform: "github-actions"
  # 构建脚本命名规则
  build-scripts: "build-*.sh"
  # 部署脚本命名规则
  deploy-scripts: "deploy-*.sh"
}

# 文件编码规范
file-encoding: {
  # 所有文件统一使用UTF-8编码
  encoding: "utf-8"
  # 禁止使用BOM
  forbid-bom: true
}

# 项目结构规范
project-structure: {
  # 前后端分离目录
  backend-dir: "backend"
  frontend-dir: "frontend"
  # 文档目录
  docs-dir: "docs"
  # 脚本目录
  scripts-dir: "scripts"
  # 配置文件目录
  config-dir: "config"
}

# 脚本执行权限规范
executable-files: {
  # 需要执行权限的文件模式
  patterns: ["*.sh", "*.py"]
  # 添加执行权限的命令
  chmod-command: "chmod +x"
  # 检查执行权限的命令
  check-command: "ls -la"
  # Python脚本需要可执行权限
  python-executable: true
  # 确保Python脚本具有shebang
  python-shebang: "#!/usr/bin/env python3"
  # 规则检查
  rules: [
    {
      # Shell脚本必须有执行权限
      pattern: "*.sh",
      require-executable: true,
      require-shebang: true,
      shebang: "#!/bin/bash"
    },
    {
      # Python脚本必须有执行权限
      pattern: "scripts/*.py",
      require-executable: true,
      require-shebang: true,
      shebang: "#!/usr/bin/env python3"
    }
  ]
}

# 开发辅助工具
developer-tools: {
  # 检查脚本执行权限的工具
  script-permission-check: {
    description: "检查并修复脚本文件权限问题的自动化工具",
    commands: [
      {
        description: "检查所有shell脚本权限",
        command: "find . -name \"*.sh\" -type f | grep -v \"node_modules\" | xargs ls -la",
        output: "text"
      },
      {
        description: "检查所有Python脚本权限",
        command: "find . -name \"*.py\" -type f -path \"*/scripts/*\" | xargs ls -la",
        output: "text"
      },
      {
        description: "修复所有shell脚本权限",
        command: "find . -name \"*.sh\" -type f | grep -v \"node_modules\" | xargs chmod +x",
        output: "silent"
      },
      {
        description: "修复所有Python脚本权限",
        command: "find . -name \"*.py\" -type f -path \"*/scripts/*\" | xargs chmod +x",
        output: "silent"
      },
      {
        description: "检查所有shell脚本shebang",
        command: "grep -L \"^#!/bin/bash\" $(find . -name \"*.sh\" -type f | grep -v \"node_modules\")",
        output: "list",
        error-handling: "ignore"
      },
      {
        description: "检查所有Python脚本shebang",
        command: "grep -L \"^#!/usr/bin/env python3\" $(find . -name \"*.py\" -type f -path \"*/scripts/*\")",
        output: "list",
        error-handling: "ignore"
      }
    ]
  },
  # 添加到git hooks中的pre-commit脚本
  recommended-git-hooks: {
    pre-commit: [
      "# 检查脚本执行权限",
      "find . -name \"*.sh\" -type f | grep -v \"node_modules\" | xargs chmod +x",
      "find . -name \"*.py\" -type f -path \"*/scripts/*\" | xargs chmod +x",
      "# 检查是否有缺失shebang的shell脚本",
      "missing_shebang=$(grep -L \"^#!/bin/bash\" $(find . -name \"*.sh\" -type f | grep -v \"node_modules\") 2>/dev/null)",
      "if [ ! -z \"$missing_shebang\" ]; then",
      "  echo \"警告: 以下shell脚本缺少shebang行:\"",
      "  echo \"$missing_shebang\"",
      "  exit 1",
      "fi",
      "# 检查是否有缺失shebang的Python脚本",
      "missing_py_shebang=$(grep -L \"^#!/usr/bin/env python3\" $(find . -name \"*.py\" -type f -path \"*/scripts/*\") 2>/dev/null)",
      "if [ ! -z \"$missing_py_shebang\" ]; then",
      "  echo \"警告: 以下Python脚本缺少shebang行:\"",
      "  echo \"$missing_py_shebang\"",
      "  exit 1",
      "fi"
    ]
  }
}
